{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/type_vs_interface/","result":{"data":{"site":{"siteMetadata":{"title":"Ykss","author":"[Ykss]","siteUrl":"https://ykss.netlify.app","comment":{"disqusShortName":"","utterances":"ykss/ykss.netlify.com"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"ff5379ce-86a8-5593-a669-335cc2b8e794","excerpt":"타입스크립트에서 타입(Type)과 인터페이스(Interface)는 유사한 점이 매우 많고, 여러 경우에 자유롭게 혼용되어 사용 가능하다. 그러나 둘 사이에는 차이와 한계가 분명히 존재한다. 원시 타입(Primitive Types) 타입은 원시 타입(symbol, boolean, string, number, bigint, etc.)을 정의할 수 있다. 반면에 인터페이스는 불가능하다. 타입은 새로운 타입을 만드는 것이 아니기 때문에 type alias…","html":"<p>타입스크립트에서 타입(Type)과 인터페이스(Interface)는 유사한 점이 매우 많고, 여러 경우에 자유롭게 혼용되어 사용 가능하다. 그러나 둘 사이에는 차이와 한계가 분명히 존재한다.</p>\n<h2 id=\"원시-타입primitive-types\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85primitive-types\" aria-label=\"원시 타입primitive types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시 타입(Primitive Types)</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">CustomString</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> str<span class=\"token operator\">:</span> CustomString <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ❌</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CustomStringByInterface</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입은 원시 타입(symbol, boolean, string, number, bigint, etc.)을 정의할 수 있다. 반면에 인터페이스는 불가능하다. 타입은 새로운 타입을 만드는 것이 아니기 때문에 type alias로 불린다. 반면에 인터페이스는 항상 새로운 타입을 생성한다.</p>\n<h2 id=\"유니온-타입union-types\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%88%EC%98%A8-%ED%83%80%EC%9E%85union-types\" aria-label=\"유니온 타입union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유니온 타입(Union Types)</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Fruit</span> <span class=\"token operator\">=</span> <span class=\"token string\">'apple'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'lemon'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Vegetable</span> <span class=\"token operator\">=</span> <span class=\"token string\">'potato'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'tomato'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 'apple' | 'lemon' | 'potato' | 'tomato'</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Food</span> <span class=\"token operator\">=</span> Fruit <span class=\"token operator\">|</span> Vegetable<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> apple<span class=\"token operator\">:</span> Food <span class=\"token operator\">=</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>유니온 타입은 타입만 사용 가능하다.</p>\n<h2 id=\"튜플-타입tuple-types\" style=\"position:relative;\"><a href=\"#%ED%8A%9C%ED%94%8C-%ED%83%80%EC%9E%85tuple-types\" aria-label=\"튜플 타입tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>튜플 타입(Tuple Types)</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> cat<span class=\"token operator\">:</span> Animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>튜플 타입은 타입으로만 정의 가능하다.</p>\n<h2 id=\"객체함수-타입objects--function-types\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85objects--function-types\" aria-label=\"객체함수 타입objects  function types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체/함수 타입(Objects / Function Types)</h2>\n<p>인터페이스와 타입 모두 객체 타입이나 함수 타입을 선언할 수 있다. 하지만 인터페이스의 경우, 같은 인터페이스를 여러번 선언 가능하다. 그리고 그들은 자동으로 병합된다. 반면에 타입은 병합되지 않고 유니크 해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 인터페이스를 사용할 때, 같은 이름의 인터페이스는 자동 병합된다.</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PrintName</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PrintName</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ✅</span>\n  <span class=\"token keyword\">const</span> printName<span class=\"token operator\">:</span> <span class=\"token function-variable function\">PrintName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name: '</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 타입을 사용할 때, 그것은 유일 해야하고, 오직 &amp;를 사용해야만 병합 가능하다.</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">PrintName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ✅</span>\n  <span class=\"token keyword\">const</span> printName<span class=\"token operator\">:</span> <span class=\"token function-variable function\">PrintName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name: '</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다른 키 포인트는 타입은 <code class=\"language-text\">&amp;</code>(intersection)을 사용하고, 인터페이스는 상속(inheritance)를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">printName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ❌ 인터페이스 'Child'는 인터페이스 'Parent'를 잘못 확장했다.</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">printName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">printName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Child</span> <span class=\"token operator\">=</span> Parent <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 여기서 두 printName은 intersection 된다.</span>\n    <span class=\"token comment\">// 이것은 `(name: number | string) => void`과 같다.</span>\n    <span class=\"token function-variable function\">printName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> test<span class=\"token operator\">:</span> Child <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">printName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name: '</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  test<span class=\"token punctuation\">.</span><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  test<span class=\"token punctuation\">.</span><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 나타난 에러와 같이 인터페이스를 상속할 때, 서브타입은 슈퍼타입과 충돌할 수 없고, 오직 확장만 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">printName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ✅</span>\n    <span class=\"token function-variable function\">printName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서 볼 수 있듯이 인터페이스는 <code class=\"language-text\">extends</code>를 사용하여 상속을 구현한다. 그리고 타입은 &#x26;를 사용하여 교차(intersection)을 구현한다.</p>\n<p>몇 가지 케이스에서 자동 병합과 인터페이스의 확장성은 유용하다. 만약 써드파티 라이브러리를 만들었거나 공개 API를 공개 했다면, 사용자는 그것을 인터페이스 메카니즘을 통해 확장할 수 있다.</p>\n<p>만약 객체 타입을 선언하기 원한다면, 인터페이스를 먼저 사용하고, 필요할 때 타입을 사용하는 것이 좋다.</p>\n<h2 id=\"매핑된-객체-타입mapped-object-types\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%ED%95%91%EB%90%9C-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85mapped-object-types\" aria-label=\"매핑된 객체 타입mapped object types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매핑된 객체 타입(Mapped Object Types)</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Vegetable</span> <span class=\"token operator\">=</span> <span class=\"token string\">'potato'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'tomato'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">VegetableOption</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> Vegetable<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> option<span class=\"token operator\">:</span> VegetableOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    potato<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    tomato<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// \"potato\" | \"tomato\"</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">VegetableAlias</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> VegetableOption<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">VegetableOption</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ❌ 매핑된 타입은 프로퍼티나 메서드로 선언할 수 없다.</span>\n    <span class=\"token punctuation\">[</span>Property <span class=\"token keyword\">in</span> Vegetable<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>매핑된 객체 타입은 타입으로만 정의될 수 있고, <code class=\"language-text\">in</code> 키워드와 <code class=\"language-text\">keyof</code> 키워드를 사용할 수 있다.</p>\n<h2 id=\"알려지지-않은-타입unknown-types\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EB%A0%A4%EC%A7%80%EC%A7%80-%EC%95%8A%EC%9D%80-%ED%83%80%EC%9E%85unknown-types\" aria-label=\"알려지지 않은 타입unknown types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알려지지 않은 타입(Unknown Types)</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> potato <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'potato'</span><span class=\"token punctuation\">,</span> weight<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// type Vegetable = {</span>\n  <span class=\"token comment\">// name: string;</span>\n  <span class=\"token comment\">// weight: number;</span>\n  <span class=\"token comment\">// }</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Vegetable</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> potato<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> tomato<span class=\"token operator\">:</span> Vegetable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'tomato'</span><span class=\"token punctuation\">,</span>\n    weight<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">unknown</code> 타입을 다룰 때, <code class=\"language-text\">typeof</code>를 사용하여 타입을 확인할 수 있다. 그러나 그것은 타입으로만 가능하고, 인터페이스는 불가하다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>결론적으로 타입은 인터페이스의 거의 모든 기능을 커버한다. 그러나 인터페이스는 항상 확장 가능하고, 타입은 그렇지 않다. 그러므로 경우에 따라서 선택하여 사용해야 한다. 가급적 프로젝트내에서 일관된 기준에 따라 선택해야 한다.</p>\n<h3 id=\"타입을-사용해야-하는-경우\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"타입을 사용해야 하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입을 사용해야 하는 경우</h3>\n<ul>\n<li>원시 타입을 정의할 경우</li>\n<li>튜플 타입을 정의할 경우</li>\n<li>함수 타입을 정의할 경우</li>\n<li>유니온 타입을 정의할 경우</li>\n<li>매핑된 타입을 정의할 경우</li>\n</ul>\n<h3 id=\"인터페이스를-사용해야-하는-경우\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"인터페이스를 사용해야 하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스를 사용해야 하는 경우</h3>\n<ul>\n<li>선언 병합(자동 병합)의 이점을 활용해야 하는 경우</li>\n<li>객체 타입을 정의하거나, 타입을 사용할 필요가 없을 경우</li>\n</ul>\n<hr>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<ul>\n<li><a href=\"https://betterprogramming.pub/differences-between-type-aliases-and-interfaces-in-typescript-4-6-6489246d4e48\">https://betterprogramming.pub/differences-between-type-aliases-and-interfaces-in-typescript-4-6-6489246d4e48</a></li>\n</ul>","frontmatter":{"title":"[Typescript] 타입(Type)과 인터페이스(Interface)의 차이점","date":"September 06, 2022","thumbnail":null}}},"pageContext":{"slug":"/typescript/type_vs_interface/","previous":{"fields":{"slug":"/translation/500ms-to-1.7ms-in-react:-a-journey-and-a-checklist/"},"frontmatter":{"title":"(번역) 리액트 성능 최적화, 500ms 에서 1.7ms 까지 : 그 여정과 체크리스트","category":"Translation","draft":false}},"next":{"fields":{"slug":"/translation/unit-testing-with-jest-react-and-typescript/"},"frontmatter":{"title":"(번역) Jest, React 및 Typescript를 사용한 단위 테스트","category":"Translation","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}