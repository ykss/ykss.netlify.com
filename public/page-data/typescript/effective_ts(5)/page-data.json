{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/effective_ts(5)/","result":{"data":{"site":{"siteMetadata":{"title":"Ykss","author":"[Ykss]","siteUrl":"https://ykss.netlify.app","comment":{"disqusShortName":"","utterances":"ykss/ykss.netlify.com"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"f5010906-1292-5db4-8886-d1117d6d4c59","excerpt":"아이템 33 : string 타입보다 더 구체적인 타입 사용하기 위와 같이 무작정  으로 쓰는 건 피해야 한다. 위와 같이 유니온 타입을 정의해서 사용하고, 날짜 같은 경우 Date 객체로 사용해서 날짜 형식만 입력할 수 있도록하는 것이 낫다. 이렇게 하면 세가지 장점이 있다. 타입을 명시적으로 정의하여 다른 곳으로 값이 전달되어도 타입 정보가 유지된다. 타입을 명시적으로 정의하고 해당 타입의 의미를 설명하는 주석을 붙여넣을 수 있다. -> 몰랐는데 유용한 방식이라고 생각된다. keyof…","html":"<h2 id=\"아이템-33--string-타입보다-더-구체적인-타입-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-33--string-%ED%83%80%EC%9E%85%EB%B3%B4%EB%8B%A4-%EB%8D%94-%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9D%B8-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 33  string 타입보다 더 구체적인 타입 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 33 : string 타입보다 더 구체적인 타입 사용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Album</span> <span class=\"token punctuation\">{</span>\n  artist<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  releaseDate<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// YYYY-MM-DD</span>\n  recordingType<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// E.g., \"live\" or \"studio\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 무작정 <code class=\"language-text\">string</code> 으로 쓰는 건 피해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** 어느 장소에서 녹음되었는지? */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RecordingType</span> <span class=\"token operator\">=</span> <span class=\"token string\">'studio'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'live'</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Album</span> <span class=\"token punctuation\">{</span>\n  artist<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  releaseDate<span class=\"token operator\">:</span> Date\n  recordingType<span class=\"token operator\">:</span> RecordingType\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 유니온 타입을 정의해서 사용하고, 날짜 같은 경우 Date 객체로 사용해서 날짜 형식만 입력할 수 있도록하는 것이 낫다. 이렇게 하면 세가지 장점이 있다.</p>\n<ol>\n<li>타입을 명시적으로 정의하여 다른 곳으로 값이 전달되어도 타입 정보가 유지된다.</li>\n<li>\n<p>타입을 명시적으로 정의하고 해당 타입의 의미를 설명하는 주석을 붙여넣을 수 있다.</p>\n<p>-> 몰랐는데 유용한 방식이라고 생각된다.</p>\n</li>\n<li>keyof 연산자로 더욱 세밀하게 객체의 속성 체크가 가능하다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">pluck</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>record<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=></span> r<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>문자열을 남발하여 선언된 코드를 피하자. 모든 문자열을 할당할 수 있는 string 타입보다는 더 구체적인 타입을 사용하자.</li>\n<li>변수의 범위를 보다 정확하게 표현하고 싶으면 string 타입보다 문자열 리터럴 타입의 유니온을 사용하면 된다. 타입 체크를 더 엄격히 할 수 있고 생산성이 향상된다.</li>\n<li>객체의 속성 이름을 함수 매개변수로 받을 때는 string보다 keyof T를 사용하는 것이 좋다.</li>\n</ul>\n<h2 id=\"아이템-34--부정확한-타입보다는-미완성-타입을-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-34--%EB%B6%80%EC%A0%95%ED%99%95%ED%95%9C-%ED%83%80%EC%9E%85%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%AF%B8%EC%99%84%EC%84%B1-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 34  부정확한 타입보다는 미완성 타입을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 34 : 부정확한 타입보다는 미완성 타입을 사용하기</h2>\n<p>코드를 더 정밀하게 만들려던 시도가 과하면 그로 인해 코드가 오히려 더 부정확해질 수 있다. 타입에 의존하면 부정확함으로 인해 발생하는 문제가 더 커질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Expression1</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Expression2</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Expression4</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> CallExpression\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CallExpression</span> <span class=\"token operator\">=</span> MathCall <span class=\"token operator\">|</span> CaseCall <span class=\"token operator\">|</span> RGBCall\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MathCall</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'>'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'&lt;'</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> Expression4\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> Expression4\n  length<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CaseCall</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'case'</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> Expression4\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> Expression4\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> Expression4\n  length<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">6</span> <span class=\"token operator\">|</span> <span class=\"token number\">8</span> <span class=\"token operator\">|</span> <span class=\"token number\">10</span> <span class=\"token operator\">|</span> <span class=\"token number\">12</span> <span class=\"token operator\">|</span> <span class=\"token number\">14</span> <span class=\"token operator\">|</span> <span class=\"token number\">16</span> <span class=\"token comment\">// etc.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">RGBCall</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'rgb'</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> Expression4\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> Expression4\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> Expression4\n  length<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> tests<span class=\"token operator\">:</span> Expression4<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~ Type 'true' is not assignable to type 'Expression4'</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'case'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n  <span class=\"token comment\">//  Type '[\"case\", [\">\", ...], ...]' is not assignable to type 'string'</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'**'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~~~~~~~~~~ Type '[\"**\", number, number]' is not assignable to type 'string</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'rgb'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'rgb'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~~~~~~~~~~~~~~~~~~~~~~ Type '[\"rgb\", number, number, number, number]'</span>\n  <span class=\"token comment\">//                          is not assignable to type 'string'</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> okExpressions<span class=\"token operator\">:</span> Expression4<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~~~~~~~ Type '[\"-\", number]' is not assignable to type 'string'</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~~~~~~~~~~~~ Type '[\"+\", number, ...]' is not assignable to type 'string'</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ~~~~~~~~~~~~~~ Type '[\"*\", number, ...]' is not assignable to type 'string'</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>타입을 정교하게 하려다가 발생하는 오류들이 이전보다 더 부정확해질 수 있다. 그리고 타입선언이 자동 완성을 방해해서 생산성을 떨어뜨릴 수도 있다.</p>\n<h3 id=\"요약-1\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-1\" aria-label=\"요약 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>\n<p>타입 안정성에서 불쾌한 골짜기는 피해야 한다. 타입이 없는 것보다 잘못된 것이 더 나쁘다.</p>\n<blockquote>\n<p>불쾌한 골짜기 : 어설프게 완벽을 추구하다가 오히려 역효과가 발생하는 것.</p>\n</blockquote>\n</li>\n<li>정확하게 타입을 모델링할 수 없다면, 부정확하게 모델링하지 말아야 한다. 그리고 <code class=\"language-text\">any</code>와 <code class=\"language-text\">unknown</code>을 구별해서 사용해야 한다.</li>\n<li>타입 정보를 구체적으로 만들수록 오류 메시지와 자동 완성 기능에 주의를 기울여야 한다. 정확도뿐만 아니라 개발 경험과도 관련된다.</li>\n</ul>\n<h2 id=\"아이템-35--데이터가-아닌-api와-명세를-보고-타입-만들기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-35--%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EC%95%84%EB%8B%8C-api%EC%99%80-%EB%AA%85%EC%84%B8%EB%A5%BC-%EB%B3%B4%EA%B3%A0-%ED%83%80%EC%9E%85-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"아이템 35  데이터가 아닌 api와 명세를 보고 타입 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 35 : 데이터가 아닌, API와 명세를 보고 타입 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">getLicense_repository_licenseInfo</span> <span class=\"token punctuation\">{</span>\n  __typename<span class=\"token operator\">:</span> <span class=\"token string\">'License'</span>\n  <span class=\"token comment\">/** Short identifier specified by &lt;https://spdx.org/licenses> */</span>\n  spdxId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  <span class=\"token comment\">/** The license full name specified by &lt;https://spdx.org/licenses> */</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">getLicense_repository</span> <span class=\"token punctuation\">{</span>\n  __typename<span class=\"token operator\">:</span> <span class=\"token string\">'Repository'</span>\n  <span class=\"token comment\">/** The description of the repository. */</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  <span class=\"token comment\">/** The license associated with the repository */</span>\n  licenseInfo<span class=\"token operator\">:</span> getLicense_repository_licenseInfo <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">getLicense</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** Lookup a given repository by the owner and repository name. */</span>\n  repository<span class=\"token operator\">:</span> getLicense_repository <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">getLicenseVariables</span> <span class=\"token punctuation\">{</span>\n  owner<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>GraphQL에서는 특정 쿼리에 대해 타입스크립트 타입을 생성할 수 있다. GraphQL 쿼리를 타입스크립트 타입으로 변환해주는 Apollo와 같은 도구들이 있다. 위는 Apollo를 통해 자동 생성된 결과이다. 자동으로 생성된 타입 정보는 API를 정확히 사용할 수 있도록 돕는다.</p>\n<h3 id=\"요약-2\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-2\" aria-label=\"요약 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>코드의 구석 구석까지 타입 안정성을 얻기 위해 API 또는 데이터 형식에 대한 타입 생성을 고려해야 한다.</li>\n<li>데이터에 드러나지 않는 예외 경우들이 문제가 될 수 있기 때문에 명세로 부터 코드를 생성하는 것이 좋다.</li>\n</ul>\n<h2 id=\"아이템-36--해당-분야의-용어로-타입-이름-짓기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-36--%ED%95%B4%EB%8B%B9-%EB%B6%84%EC%95%BC%EC%9D%98-%EC%9A%A9%EC%96%B4%EB%A1%9C-%ED%83%80%EC%9E%85-%EC%9D%B4%EB%A6%84-%EC%A7%93%EA%B8%B0\" aria-label=\"아이템 36  해당 분야의 용어로 타입 이름 짓기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 36 : 해당 분야의 용어로 타입 이름 짓기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  commonName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  genus<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  species<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  status<span class=\"token operator\">:</span> ConservationStatus<span class=\"token punctuation\">;</span>\n  climates<span class=\"token operator\">:</span> KoppenClimate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ConservationStatus</span> <span class=\"token operator\">=</span> <span class=\"token string\">'EX'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'EW'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'CR'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'EN'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'VU'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'NT'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'LC'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">KoppenClimate</span> <span class=\"token operator\">=</span> <span class=\"token operator\">|</span>\n  <span class=\"token string\">'Af'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Am'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'As'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Aw'</span> <span class=\"token operator\">|</span>\n  <span class=\"token string\">'BSh'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'BSk'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'BWh'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'BWk'</span> <span class=\"token operator\">|</span>\n  <span class=\"token string\">'Cfa'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Cfb'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Cfc'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Csa'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Csb'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Csc'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Cwa'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Cwb'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Cwc'</span> <span class=\"token operator\">|</span>\n  <span class=\"token string\">'Dfa'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Dfb'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Dfc'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Dfd'</span> <span class=\"token operator\">|</span>\n  <span class=\"token string\">'Dsa'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Dsb'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Dsc'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Dwa'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Dwb'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Dwc'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Dwd'</span> <span class=\"token operator\">|</span>\n  <span class=\"token string\">'EF'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'ET'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> snowLeopard<span class=\"token operator\">:</span> Animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  commonName<span class=\"token operator\">:</span> <span class=\"token string\">'Snow Leopard'</span><span class=\"token punctuation\">,</span>\n  genus<span class=\"token operator\">:</span> <span class=\"token string\">'Panthera'</span><span class=\"token punctuation\">,</span>\n  species<span class=\"token operator\">:</span> <span class=\"token string\">'Uncia'</span><span class=\"token punctuation\">,</span>\n  status<span class=\"token operator\">:</span> <span class=\"token string\">'VU'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// vulnerable</span>\n  climates<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'EF'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dfd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// alpine or subalpin</span></code></pre></div>\n<p>타입, 속성, 변수에 이름을 붙일 때 명심해야할 세가지 규칙이 있다.</p>\n<ol>\n<li>동일한 의미를 나타낼 때는 같은 용어를 사용해야 한다. 코드에서 동의어를 사용하는 것이 좋지 않다.</li>\n<li>\n<p>data, info, thing, item, object, entity와 같이 모호하고 의미 없는 이름은 피해야 한다.</p>\n<p>-> 이 부분에서 많이 찔린다..!</p>\n</li>\n<li>이름을 지을 때는 포함된 내용이나 계산 방식이 아니라 데이터 자체가 무엇인지 고려해야 한다. 좋은 이름은 추상화의 수준을 높이고 의도치 않은 충돌의 위험성을 줄여준다.</li>\n</ol>\n<h3 id=\"요약-3\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-3\" aria-label=\"요약 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>가독성을 높이고, 추상화 수준을 올리기 위해서 해당 분야의 용어를 사용해야 한다.</li>\n<li>같은 의미에 다른 이름을 붙이면 안된다. 특별한 의미가 있을 때만 용어를 구분한다.</li>\n</ul>\n<h2 id=\"아이템-37--공식-명칭에는-상표를-붙이기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-37--%EA%B3%B5%EC%8B%9D-%EB%AA%85%EC%B9%AD%EC%97%90%EB%8A%94-%EC%83%81%ED%91%9C%EB%A5%BC-%EB%B6%99%EC%9D%B4%EA%B8%B0\" aria-label=\"아이템 37  공식 명칭에는 상표를 붙이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 37 : 공식 명칭에는 상표를 붙이기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateNorm</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Vector2D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">calculateNorm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK, result is 5</span>\n<span class=\"token keyword\">const</span> vec3D <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">calculateNorm</span><span class=\"token punctuation\">(</span>vec3D<span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK! result is also 5</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token punctuation\">{</span>\n  _brand<span class=\"token operator\">:</span> <span class=\"token string\">'2d'</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">vec2D</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Vector2D <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> _brand<span class=\"token operator\">:</span> <span class=\"token string\">'2d'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateNorm</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Vector2D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Same as before</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">calculateNorm</span><span class=\"token punctuation\">(</span><span class=\"token function\">vec2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK, returns 5</span>\n<span class=\"token keyword\">const</span> vec3D <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">calculateNorm</span><span class=\"token punctuation\">(</span>vec3D<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ~~~~~ Property '_brand' is missing in type...</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">_brand</code>를 붙이는 것을 상표(brand) 기법이라고하는데, 타입 시스템에서 동작하지만 런타임에 상표를 검사하는 것과 동일한 효과를 준다. (Nominal Typing)</p>\n<h3 id=\"요약-4\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-4\" aria-label=\"요약 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>타입스크립트는 구조적 타이핑(덕 타이핑)을 사용하기 때문에 값을 세밀하게는 구분하지 못하는 경우가 있다. 이럴 때 값을 구분하기 위해 상표를 붙이는 방법이 있다.</li>\n<li>상표 기법은 타입 시스템에서 동작하나, 런타임에 상표를 검사하는 것과 동일한 효과를 얻을 수 있다.</li>\n</ul>\n<h1 id=\"5장-any-다루기\" style=\"position:relative;\"><a href=\"#5%EC%9E%A5-any-%EB%8B%A4%EB%A3%A8%EA%B8%B0\" aria-label=\"5장 any 다루기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5장. any 다루기</h1>\n<h2 id=\"아이템-38--any타입은-가능한-한-좁은-법위에서만-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-38--any%ED%83%80%EC%9E%85%EC%9D%80-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%95%9C-%EC%A2%81%EC%9D%80-%EB%B2%95%EC%9C%84%EC%97%90%EC%84%9C%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 38  any타입은 가능한 한 좁은 법위에서만 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 38 : any타입은 가능한 한 좁은 법위에서만 사용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">{</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Foo\n<span class=\"token keyword\">function</span> <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> Bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//         ~ Argument of type 'Foo' is not assignable to</span>\n  <span class=\"token comment\">//           parameter of type 'Bar'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Don't do this</span>\n  <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Prefer this</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 상황에서 두 가지 해결책 중 <code class=\"language-text\">x:any</code>보다 <code class=\"language-text\">x as any</code>가 권장된다. 그 이유는 <code class=\"language-text\">any</code> 타입이 해당 함수의 매개변수에만 사용된 표현식이어서 다른 코드에 영향을 주지 않기 때문이다. <code class=\"language-text\">f1()</code>는 변수 <code class=\"language-text\">x</code>의 타입 자체가 <code class=\"language-text\">any</code>로 바뀌어버린다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">{</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Foo\n<span class=\"token keyword\">function</span> <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> Bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// @ts-ignore</span>\n  <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> x\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">@ts-ignore</code>를 사용하면 다음 줄의 오류가 무시된다. 하지만 근본적인 문제를 해결한 것은 아니기 때문에 해결책이라고는 할 수 없다. <code class=\"language-text\">any</code>는 최소한의 범위에만 사용해야 타입 체크가 안되거나 하는 등의 부작용이 생기지 않는다.</p>\n<h3 id=\"요약-5\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-5\" aria-label=\"요약 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>의도치 않은 타입 안전성의 손실을 피하기 위해 <code class=\"language-text\">any</code>의 사용 범위를 최소한으로 좁혀야 한다.</li>\n<li>함수의 반환 타입이 <code class=\"language-text\">any</code>인 경우 타입 안정성이 나빠진다. 따라서 <code class=\"language-text\">any</code>타입을 반환하지 않도록 하자</li>\n<li>강제로 타입 오류를 제거하려면 <code class=\"language-text\">any</code>대신 <code class=\"language-text\">@ts-ignore</code>를 사용하는 것이 좋다.</li>\n</ul>\n<h2 id=\"아이템-39--any를-구체적으로-변형해서-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-39--any%EB%A5%BC-%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%98%95%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 39  any를 구체적으로 변형해서 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 39 : any를 구체적으로 변형해서 사용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLengthBad</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Don't do this!</span>\n  <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>언뜻 보면 위 코드에서 <code class=\"language-text\">any</code>나 <code class=\"language-text\">any[]</code>가 큰 차이가 있는 것 같지는 않지만, 아래 함수가 세 가지 이유에서 더 나은 함수이다.</p>\n<ol>\n<li>함수 내의 array.length 타입이 체크된다.</li>\n<li>함수의 반환 타입이 <code class=\"language-text\">any</code>대신 <code class=\"language-text\">number</code>로 추론된다.</li>\n<li>함수 호출될 때 매개변수가 배열인지 체크된다.</li>\n</ol>\n<p>그리고 함수의 매개변수가 객체인데, 값을 알 수 없다면 <code class=\"language-text\">{[key:string] :any}</code>처럼 선언하면 된다.</p>\n<h3 id=\"요약-6\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-6\" aria-label=\"요약 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li><code class=\"language-text\">any</code>를 사용할 때는 정말로 모든 값이 허용되어야하는지 검토해야 한다.</li>\n<li><code class=\"language-text\">any</code>보다 더 정확하게 모델링할 수 있도록 <code class=\"language-text\">any[]</code> 또는 <code class=\"language-text\">{[id:string] :any}</code> 또는 <code class=\"language-text\">() => any</code>처럼 구체적인 형태를 사용해야 한다.</li>\n</ul>\n<h2 id=\"아이템-40--함수-안으로-타입-단언문-감추기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-40--%ED%95%A8%EC%88%98-%EC%95%88%EC%9C%BC%EB%A1%9C-%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8%EB%AC%B8-%EA%B0%90%EC%B6%94%EA%B8%B0\" aria-label=\"아이템 40  함수 안으로 타입 단언문 감추기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 40 : 함수 안으로 타입 단언문 감추기</h2>\n<p>불필요한 예외 상황까지 고려하여 타입 정보를 힘들게 구성하기보다, 함수 내부에는 타입 단언을 사용하고 함수 외부로 드러나는 타입 정의를 정확히 명시하는게 낫다.</p>\n<h3 id=\"요약-7\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-7\" aria-label=\"요약 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>타입 선언문은 일반적으로 타입을 위험하게 만들지만 상황에 따라 필요하기도 하고 현실적인 해결책이 되기도 한다. 불가피하게 사용해야 한다면, 정확한 정의를 가지는 함수 안으로 숨기도록 한다.</li>\n</ul>\n<hr>\n<blockquote>\n<p>출처</p>\n</blockquote>\n<ul>\n<li><a href=\"http://book.interpark.com/product/BookDisplay.do?_method=detail&#x26;sc.prdNo=351145258&#x26;gclid=Cj0KCQiAnaeNBhCUARIsABEee8UniFRGTZglixPz3qpoEFiUCp51pwbO6zAoABlO1-GYydPPlgc2RU4aAgceEALw_wcB\">이펙티브 타입스크립트</a></li>\n</ul>","frontmatter":{"title":"[Typescript] 이펙티브 타입스크립트 정리(아이템33 ~ 40)","date":"December 27, 2021","thumbnail":null}}},"pageContext":{"slug":"/typescript/effective_ts(5)/","previous":{"fields":{"slug":"/typescript/effective_ts(4)/"},"frontmatter":{"title":"[Typescript] 이펙티브 타입스크립트 정리(아이템25 ~ 32)","category":"Typescript","draft":false}},"next":{"fields":{"slug":"/typescript/effective_ts(6)/"},"frontmatter":{"title":"[Typescript] 이펙티브 타입스크립트 정리(아이템41 ~ 48)","category":"Typescript","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}