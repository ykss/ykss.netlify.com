{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/effective_ts(4)/","result":{"data":{"site":{"siteMetadata":{"title":"Ykss","author":"[Ykss]","siteUrl":"https://ykss.netlify.app","comment":{"disqusShortName":"","utterances":"ykss/ykss.netlify.com"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8a3f772f-57c6-588e-a216-53affcb891f4","excerpt":"아이템 25 : 비동기 코드에는 콜백 대신 async 함수 사용하기 콜백이 중첩된 코드는 직관적으로 이해하기 어렵고 가독성이 떨어진다. -> 그래서 등장한 것이 promise였고, 과 문법이 등장했다. -> ES201…","html":"<h2 id=\"아이템-25--비동기-코드에는-콜백-대신-async-함수-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-25--%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%94%EB%93%9C%EC%97%90%EB%8A%94-%EC%BD%9C%EB%B0%B1-%EB%8C%80%EC%8B%A0-async-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 25  비동기 코드에는 콜백 대신 async 함수 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 25 : 비동기 코드에는 콜백 대신 async 함수 사용하기</h2>\n<p>콜백이 중첩된 코드는 직관적으로 이해하기 어렵고 가독성이 떨어진다.</p>\n<p>-> 그래서 등장한 것이 promise였고, <code class=\"language-text\">.then()</code>과 <code class=\"language-text\">.catch()</code>문법이 등장했다.</p>\n<p>-> ES2017에서는 <code class=\"language-text\">async</code>와 <code class=\"language-text\">await</code> 문법이 등장해서 더욱 간단하게 처리가 가능해졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> response2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> response3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url3<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>콜백보다 프로미스 문법을 사용해야 되는 이유</p>\n<ol>\n<li>프로미스가 코드를 작성하기 쉽다.</li>\n<li>프로미스가 타입을 추론하기 쉽다.</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>response1<span class=\"token punctuation\">,</span> response2<span class=\"token punctuation\">,</span> response3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>병렬로 페이지를 로드할 때는 위와 같이 <code class=\"language-text\">Promise.all</code> 사용이 가능하다. 프로미스를 모두 이행한 후 반환하며, 프로미스 중 하나라도 거부되면 해당 함수도 거부된다.</p>\n<p><code class=\"language-text\">Promise.race</code>도 자주 사용되는데, 아래와 같이 타임아웃을 사용할 때 주로 사용된다. <code class=\"language-text\">Promise.race</code>는 가장 먼저 완료되는 것의 결과를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>millis<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> millis<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchWithTimeout</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ms<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>프로미스를 생성하기 보다 async/await를 사용해야하는 이유</p>\n<ol>\n<li>일반적으로 간결하고 직관적인 코드가 된다.</li>\n<li>async 함수의 경우 항상 프로미스를 반환하도록 강제된다.</li>\n</ol>\n</li>\n</ul>\n<p><code class=\"language-text\">async function getJSON(url:string) === function getJSON(url:string) : Promise&lt;any></code></p>\n<p>async만 붙혀서 사용해도 반환타입을 강제할 수 있기 때문에 항상 비동기 코드를 작성할 수 있다.</p>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ol>\n<li>콜백보다는 프로미스가 간결성과 타입 추론 면에서 유리</li>\n<li>프로미스를 직접 생성하기보단 async ~ await를 쓰면 간결하고 직관적으로 작성 가능</li>\n<li>프로미스를 반환하는 함수에는 async로 선언하는 게 좋다.</li>\n</ol>\n<h2 id=\"아이템-26--타입-추론에-문맥이-어떻게-사용되는지-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-26--%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0%EC%97%90-%EB%AC%B8%EB%A7%A5%EC%9D%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94%EC%A7%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 26  타입 추론에 문맥이 어떻게 사용되는지 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 26 : 타입 추론에 문맥이 어떻게 사용되는지 이해하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Language</span> <span class=\"token operator\">=</span> <span class=\"token string\">'JavaScript'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'TypeScript'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Python'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token operator\">:</span> Language<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token keyword\">let</span> language <span class=\"token operator\">=</span> <span class=\"token string\">'JavaScript'</span>\n<span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ~~~~~~~~ Argument of type 'string' is not assignable</span>\n<span class=\"token comment\">//          to parameter of type 'Language'</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">language</code>를 string으로 추론하여 Language 타입으로 할당 불가능한 오류가 발생 할 수 있기 때문에 이럴 때는 타입선언 시에 타입을 <code class=\"language-text\">let language: Language = 'JavaScript';</code> 과 같이 변경하면 오류가 뜨지 않는다. 또는 language를 <code class=\"language-text\">let</code>이 아닌 <code class=\"language-text\">const</code>로 상수로 만들면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Language</span> <span class=\"token operator\">=</span> <span class=\"token string\">'JavaScript'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'TypeScript'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Python'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token operator\">:</span> Language<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Parameter is a (latitude, longitude) pair.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>where<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token keyword\">const</span> loc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//    ~~~ Argument of type 'number[]' is not assignable to</span>\n<span class=\"token comment\">//        parameter of type '[number, number]'</span></code></pre></div>\n<p>위에서도 <code class=\"language-text\">loc</code>을 number[]로 추론하기 때문에 더 많은 값들을 추가할 수도 있기 때문에 튜플이라고 명시해주어야 에러가 발생하지 않는다.</p>\n<p><code class=\"language-text\">const loc : [number,number] = [10,20]</code> 과 같이 사용하면 에러가 뜨지 않는다. <code class=\"language-text\">as const</code>의 방식도 소개되었지만, 타입 정의에 실수가 있다면 오류가 타입 정의가 아닌 호출되는 곳에서 발생하기 때문에 중첩된 객체에서 오류가 발생할 경우 근본적인 원인을 파악하기 어렵다.</p>\n<p>객체 사용 시에도 타입을 명시하거나 상수 단언을 통해 잘못된 추론을 해결할 수 있다.</p>\n<ul>\n<li>\n<p>배열과 객체에 as const 붙였을 때 차이점</p>\n<ul>\n<li><code class=\"language-text\">const loc = [10, 20] as const</code> 일때는 <code class=\"language-text\">const loc: readonly [10, 20]</code>로 추론된다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> ts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nlanguage<span class=\"token operator\">:</span> <span class=\"token string\">'TypeScript'</span><span class=\"token punctuation\">,</span>\norganization<span class=\"token operator\">:</span> <span class=\"token string\">'Microsoft'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\n<span class=\"token comment\">// 위와 같을 때는 아래처럼 추론된다.</span>\n<span class=\"token keyword\">const</span> ts<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">readonly</span> language<span class=\"token operator\">:</span> <span class=\"token string\">'TypeScript'</span>\n<span class=\"token keyword\">readonly</span> organization<span class=\"token operator\">:</span> <span class=\"token string\">'Microsoft'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>배열일때는 배열 전체에 readonly가 되고 객체일 때는 객체 내부의 값들에 readonly가 된다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"요약-1\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-1\" aria-label=\"요약 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>변수를 뽑아서 별도로 선언 시 오류가 발생한다면 타입 선언을 추가해야 한다.</li>\n<li>변수가 상수라면 상수 단언(as const)을 사용해야 한다. 하지만 상수 단언 사용 시 정의한 곳이 아닌 사용한 곳에서 오류가 발생하므로 주의해야 한다.</li>\n</ul>\n<h2 id=\"아이템-27--함수형-기법과-라이브러리로-타입-흐름-유지하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-27--%ED%95%A8%EC%88%98%ED%98%95-%EA%B8%B0%EB%B2%95%EA%B3%BC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A1%9C-%ED%83%80%EC%9E%85-%ED%9D%90%EB%A6%84-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"아이템 27  함수형 기법과 라이브러리로 타입 흐름 유지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 27 : 함수형 기법과 라이브러리로 타입 흐름 유지하기</h2>\n<h3 id=\"요약-2\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-2\" aria-label=\"요약 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>타입 흐름을 개선하고 가독성을 높이고, 명시적인 타입 구문의 필요성을 줄이기 위해서 내장된 함수형 기법이나 로대시 같은 유틸리티 라이브러리를 사용하는 것이 낫다.</li>\n</ul>\n<h1 id=\"4장-타입-설계\" style=\"position:relative;\"><a href=\"#4%EC%9E%A5-%ED%83%80%EC%9E%85-%EC%84%A4%EA%B3%84\" aria-label=\"4장 타입 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4장. 타입 설계</h1>\n<h2 id=\"아이템-28--유효한-상태만-표현하는-타입을-지향하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-28--%EC%9C%A0%ED%9A%A8%ED%95%9C-%EC%83%81%ED%83%9C%EB%A7%8C-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A7%80%ED%96%A5%ED%95%98%EA%B8%B0\" aria-label=\"아이템 28  유효한 상태만 표현하는 타입을 지향하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 28 : 유효한 상태만 표현하는 타입을 지향하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  pageText<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  isLoading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> currentPage<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\n<span class=\"token comment\">// 유효상태만 표현하는 방식으로 변경</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestPending</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestError</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span>\n  error<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestSuccess</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> <span class=\"token string\">'ok'</span>\n  pageText<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RequestState</span> <span class=\"token operator\">=</span> RequestPending <span class=\"token operator\">|</span> RequestError <span class=\"token operator\">|</span> RequestSuccess\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  currentPage<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  requests<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> RequestState <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"요약-3\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-3\" aria-label=\"요약 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>유효한 상태와 무효한 상태를 둘 다 표현하는 타입은 혼란을 초래하기 쉽고, 오류를 유발한다.</li>\n<li>유효한 상태만 표현하는 타입을 지향해야 한다. 코드가 길어질 수 있고 표현이 어려울 수 있지만 결국은 시간을 절약할 수 있다.</li>\n</ul>\n<h2 id=\"아이템-29--사용할-때는-너그럽게-생성할-때는-엄격하게\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-29--%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C%EB%8A%94-%EB%84%88%EA%B7%B8%EB%9F%BD%EA%B2%8C-%EC%83%9D%EC%84%B1%ED%95%A0-%EB%95%8C%EB%8A%94-%EC%97%84%EA%B2%A9%ED%95%98%EA%B2%8C\" aria-label=\"아이템 29  사용할 때는 너그럽게 생성할 때는 엄격하게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 29 : 사용할 때는 너그럽게, 생성할 때는 엄격하게</h2>\n<p>함수의 매개변수는 타입의 범위가 넓어도 되지만, 결과를 반환할 떄는 타입의 범위가 더 구체적이어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LngLat</span> <span class=\"token punctuation\">{</span>\n  lng<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  lat<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LngLatLike</span> <span class=\"token operator\">=</span> LngLat <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> lon<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> lat<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Camera</span> <span class=\"token punctuation\">{</span>\n  center<span class=\"token operator\">:</span> LngLat\n  zoom<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  bearing<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  pitch<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CameraOptions</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span>Partial<span class=\"token operator\">&lt;</span>Camera<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'center'</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  center<span class=\"token operator\">?</span><span class=\"token operator\">:</span> LngLatLike\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LngLatBounds</span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> northeast<span class=\"token operator\">:</span> LngLatLike<span class=\"token punctuation\">;</span> southwest<span class=\"token operator\">:</span> LngLatLike <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>LngLatLike<span class=\"token punctuation\">,</span> LngLatLike<span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setCamera</span><span class=\"token punctuation\">(</span>camera<span class=\"token operator\">:</span> CameraOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">viewportForBounds</span><span class=\"token punctuation\">(</span>bounds<span class=\"token operator\">:</span> LngLatBounds<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Camera</code></pre></div>\n<p>위의 경우와 같이 매개변수에는 좀 더 느슨한 <code class=\"language-text\">LatLatLike</code>와 같은 타입을 만들어 적용할 수 있다. 그러나 반환형은 가능한 엄격하게 범위를 좁히도록 해야 한다. 이때 <code class=\"language-text\">Partial&lt;></code>이나 <code class=\"language-text\">Omit&lt;></code>과 같은 유틸리티 함수들을 활용하기 유용하다.</p>\n<h3 id=\"요약-4\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-4\" aria-label=\"요약 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>매개변수 타입은 반환 타입에 비해 범위가 넓은 경향이 있다. 선택적 속성과 유니온 타입은 반환 타입보다는 매개변수 타입에 일반적이다.</li>\n<li>매개변수와 반환 타입은 재사용을 위해 기본 형태(반환 타입)과 느슨한 형태(매개변수 타입)을 도입하는 게 좋다.</li>\n</ul>\n<h2 id=\"아이템-30--문서에-타입-정보를-쓰지-않기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-30--%EB%AC%B8%EC%84%9C%EC%97%90-%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EC%93%B0%EC%A7%80-%EC%95%8A%EA%B8%B0\" aria-label=\"아이템 30  문서에 타입 정보를 쓰지 않기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 30 : 문서에 타입 정보를 쓰지 않기</h2>\n<p>함수의 입력과 출력의 타입을 코드로 표현하는 것이 주석보다 더 나은 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getForegroundColor</span><span class=\"token punctuation\">(</span>page<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> page <span class=\"token operator\">===</span> <span class=\"token string\">'login'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> r<span class=\"token operator\">:</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">:</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">127</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> r<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getForegroundColor</span><span class=\"token punctuation\">(</span>page<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Color <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> page <span class=\"token operator\">===</span> <span class=\"token string\">'login'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> r<span class=\"token operator\">:</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">:</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">127</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> r<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> g<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>매개변수나 반환형의 타입을 표시해줌을 통해 불필요한 주석을 줄일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** Does not modify nums */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 매개변수를 변경하지 않는다고 주석을 쓰는 것 보다 <code class=\"language-text\">readonly</code>를 붙여주면서 규칙을 강제하면 된다.</p>\n<h3 id=\"요약-5\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-5\" aria-label=\"요약 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>주석과 변수명에 타입 정보를 적는 것은 피해야 한다. 타입 선언이 중복되는 것으로 끝나면 다행이지만 타입 정보에 모순이 발생할 수도 있다.</li>\n<li>타입이 명확하지 않은 경우는 변수명에 단위 정보를 포함하는 것을 고려하는게 좋습니다. (ex. <code class=\"language-text\">timeMs</code>,<code class=\"language-text\">temperatureC</code>)</li>\n</ul>\n<h2 id=\"아이템-31--타입-주변에-null-값-배치하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-31--%ED%83%80%EC%9E%85-%EC%A3%BC%EB%B3%80%EC%97%90-null-%EA%B0%92-%EB%B0%B0%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"아이템 31  타입 주변에 null 값 배치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 31 : 타입 주변에 null 값 배치하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">extent</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"요약-6\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-6\" aria-label=\"요약 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>한 값의 null 여부가 다른 값의 null 여부에 암시적으로 관련되도록 설계해선 안된다.</li>\n<li>API 작성 시 반환 타입을 큰 객체로 만들고 반환 타입 전체가 null이거나 null이 아니게 만들어야 한다,.</li>\n<li>클래스를 만들 때는 필요한 모든 값이 준비되었을 때 생성하여 null이 존재하지 않도록 하는 것이 좋다.</li>\n<li><code class=\"language-text\">strictNullChecks</code>를 설정하면 코드에 많은 오류가 표시되지만 null 값과 관련된 문제점을 찾아낼 수 있기 때문에 반드시 필요하다.</li>\n</ul>\n<h2 id=\"아이템-32--유니온의-인터페이스보다는-인터페이스의-유니온을-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-32--%EC%9C%A0%EB%8B%88%EC%98%A8%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%9C%A0%EB%8B%88%EC%98%A8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 32  유니온의 인터페이스보다는 인터페이스의 유니온을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 32 : 유니온의 인터페이스보다는 인터페이스의 유니온을 사용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Layer</span> <span class=\"token punctuation\">{</span>\n  layout<span class=\"token operator\">:</span> FillLayout <span class=\"token operator\">|</span> LineLayout <span class=\"token operator\">|</span> PointLayout\n  paint<span class=\"token operator\">:</span> FillPaint <span class=\"token operator\">|</span> LinePaint <span class=\"token operator\">|</span> PointPaint\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 위의 방식보다는 아래가 낫다.</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">FillLayer</span> <span class=\"token punctuation\">{</span>\n  layout<span class=\"token operator\">:</span> FillLayout\n  paint<span class=\"token operator\">:</span> FillPaint\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LineLayer</span> <span class=\"token punctuation\">{</span>\n  layout<span class=\"token operator\">:</span> LineLayout\n  paint<span class=\"token operator\">:</span> LinePaint\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PointLayer</span> <span class=\"token punctuation\">{</span>\n  layout<span class=\"token operator\">:</span> PointLayout\n  paint<span class=\"token operator\">:</span> PointPaint\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Layer</span> <span class=\"token operator\">=</span> FillLayer <span class=\"token operator\">|</span> LineLayer <span class=\"token operator\">|</span> PointLayer\n\n<span class=\"token comment\">//-------------------------------------------</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token comment\">// These will either both be present or not be present</span>\n  placeOfBirth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  dateOfBirth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 주석으로 속성의 관계를 표시하는 것은 위험하다.</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  birth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    place<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    date<span class=\"token operator\">:</span> Date\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//------------------------------------------</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonWithBirth</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n  placeOfBirth<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  dateOfBirth<span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> Name <span class=\"token operator\">|</span> PersonWithBirth</code></pre></div>\n<h3 id=\"요약-7\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-7\" aria-label=\"요약 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>유니온 타입의 속성을 여러개 가지는 인터페이스는 속성 간의 관계가 분명하지 않기 때문에 실수가 발생할 수 있다.</li>\n<li>유니온의 인터페이스보다 인터페이스의 유니온이 더 정확하고 이해하기 쉽다.</li>\n<li>타입스크립트가 제어 흐름을 분석할 수 있도록 타입에 태그를 넣는 것을 고려해야 한다. 태그된 유니온은 타입스크립트와 잘 어울린다.</li>\n</ul>\n<hr>\n<blockquote>\n<p>출처</p>\n</blockquote>\n<ul>\n<li><a href=\"http://book.interpark.com/product/BookDisplay.do?_method=detail&#x26;sc.prdNo=351145258&#x26;gclid=Cj0KCQiAnaeNBhCUARIsABEee8UniFRGTZglixPz3qpoEFiUCp51pwbO6zAoABlO1-GYydPPlgc2RU4aAgceEALw_wcB\">이펙티브 타입스크립트</a></li>\n</ul>","frontmatter":{"title":"[Typescript] 이펙티브 타입스크립트 정리(아이템25 ~ 32)","date":"December 25, 2021","thumbnail":null}}},"pageContext":{"slug":"/typescript/effective_ts(4)/","previous":{"fields":{"slug":"/typescript/effective_ts(2)/"},"frontmatter":{"title":"[Typescript] 이펙티브 타입스크립트 정리(아이템9 ~ 16)","category":"Typescript","draft":false}},"next":{"fields":{"slug":"/typescript/effective_ts(5)/"},"frontmatter":{"title":"[Typescript] 이펙티브 타입스크립트 정리(아이템33 ~ 40)","category":"Typescript","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}