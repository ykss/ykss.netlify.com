{"componentChunkName":"component---src-templates-blog-post-js","path":"/vue/vue-property-decorator/","result":{"data":{"site":{"siteMetadata":{"title":"Ykss","author":"[Ykss]","siteUrl":"https://ykss.netlify.app","comment":{"disqusShortName":"","utterances":"ykss/ykss.netlify.com"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"7d95c218-25b8-5a9a-b52f-6e2cc8590d8f","excerpt":"는 typescript환경에서 vue를 클래스 타입으로 사용할 때 주로 사용하는 라이브러리이고 를 기반으로 만들어졌다.  라이브러리는 데코레이터(@)를 사용하여 클래스 스타일로 코딩할 수 있게 해주는 라이브러리이다. 1. @Component  데코레이터는 정의한 class를 Vue component로 만들어준다. data나 methods…","html":"<p><code class=\"language-text\">vue-property-decorator</code>는 typescript환경에서 vue를 클래스 타입으로 사용할 때 주로 사용하는 라이브러리이고 <code class=\"language-text\">vue-class-component</code>를 기반으로 만들어졌다.</p>\n<p><code class=\"language-text\">vue-class-component</code> 라이브러리는 데코레이터(@)를 사용하여 클래스 스타일로 코딩할 수 있게 해주는 라이브러리이다.</p>\n<h2 id=\"1-component\" style=\"position:relative;\"><a href=\"#1-component\" aria-label=\"1 component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. @Component</h2>\n<p><code class=\"language-text\">@Component</code> 데코레이터는 정의한 class를 Vue component로 만들어준다. data나 methods도 일반적인 클래스의 프로퍼티 형태로 선언하여 사용할 수 있다. 이 데코레이터는 <code class=\"language-text\">vue-property-decorator</code>에서 제공한다기 보단 <code class=\"language-text\">vue-class-component</code>에서 가져온 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-property-decorator'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// data</span>\n  message <span class=\"token operator\">=</span> <span class=\"token string\">'hello world!'</span>\n  <span class=\"token comment\">// method</span>\n  <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>단, 메서드를 선언할 때, <code class=\"language-text\">create()</code>, <code class=\"language-text\">mounted()</code> 와 같이 vue의 라이프사이클 훅이나 <code class=\"language-text\">beforeRouteEnter</code>처럼 뷰 네비게이트 가드 훅 등은 특별한 기능을 하기 때문에 일반적인 메서드 이름으로는 피해야 한다.</p>\n<p>Computed Properties의 경우는 두 가지 방법으로 사용 가능하다. 첫 번째 방법은 <code class=\"language-text\">getter/setter</code>를 선언하여 사용하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> Component <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-class-component'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Ngolo'</span>\n  lastName <span class=\"token operator\">=</span> <span class=\"token string\">'Kante'</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> splitted <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> splitted<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> splitted<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>또 다른 방법은 <code class=\"language-text\">@Component</code> 데코레이터 내에서 사용하는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      retrun <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Ngolo'</span>\n  lastName <span class=\"token operator\">=</span> <span class=\"token string\">'Kante'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 경우 처럼 <code class=\"language-text\">computed, components, filters</code> 와 같은 컴포넌트 옵션들을 데코레이터 인자에 포함시켜 사용할 수 있다. 이외에도 자주 사용되는 옵션은 directives, mixins, life-cycle hooks 등이 있다.</p>\n<h2 id=\"2-prop\" style=\"position:relative;\"><a href=\"#2-prop\" aria-label=\"2 prop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. @Prop</h2>\n<blockquote>\n<p>@Prop(options: (PropOptions | Constructor[] | Constructor) = {})</p>\n</blockquote>\n<p>컴포넌트에서 Prop을 받아 쓸 때 사용하는 데코레이터이다. <code class=\"language-text\">@Prop({ default: 'default value' })</code> 식으로 Prop의 기본 값을 지정해줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Vue<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">,</span> Prop <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-property-decorator'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">readonly</span> propA<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'default value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">readonly</span> propB<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">,</span> Boolean<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">readonly</span> propC<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 <code class=\"language-text\">readonly</code>와 <code class=\"language-text\">!</code>가 쓰이는 걸 볼 수 있는데 실제 <code class=\"language-text\">@Prop</code>을 사용할 때, 자주 함께 쓰이곤 한다.</p>\n<blockquote>\n<ul>\n<li><code class=\"language-text\">readonly</code></li>\n</ul>\n<p>대상 멤버를 읽기 전용으로 한정하겠다는 한정자이다. <code class=\"language-text\">readonly</code> 한정자가 붙어 있는 변수에 할당을 하면 오류가 생긴다. 보통 <code class=\"language-text\">@Prop</code>이나 <code class=\"language-text\">@Model</code> 등에 <code class=\"language-text\">readonly</code> 한정자를 선언하는게 좋다.</p>\n<ul>\n<li><code class=\"language-text\">!</code> (NonNullAssersion)</li>\n</ul>\n<p><code class=\"language-text\">!</code>은 <code class=\"language-text\">null</code> 아님 단언이라고 할 수 있다. <code class=\"language-text\">!</code>가 붙은 경우에는 해당 멤버는 <code class=\"language-text\">null</code>이나 <code class=\"language-text\">undefined</code>가 아니라고 확정짓는 의미이다. 너무 많이 사용할 경우 확장성에 제한이 생길 수 있기 때문에 <code class=\"language-text\">required: true</code>나 default value를 설정하는게 바람직하다.</p>\n</blockquote>\n<h2 id=\"3-propsync\" style=\"position:relative;\"><a href=\"#3-propsync\" aria-label=\"3 propsync permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. @PropSync</h2>\n<blockquote>\n<p>@PropSync(propName: string, options: (PropOptions | Constructor[] | Constructor) = {})</p>\n</blockquote>\n<p>보통의 경우, 부모 컴포넌트에서 내려준 Prop의 경우, 자식 컴포넌트에서 직접 변경하면 아래와 같은 메시지를 보게된다.</p>\n<blockquote>\n<p>Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “variables”</p>\n</blockquote>\n<p>뷰는 기본적으로 단방향으로 내려주기 때문에 props값을 가져와서 data에 넣어서 props로 받은 값을 child에서 변경시키면 안된다. 이러한 경우에 <code class=\"language-text\">@PropSync</code>를 사용하면 부모가 정의한 <code class=\"language-text\">.sync</code>를 통해 전달받은 props를 변경할 수 있다.</p>\n<p>&#x3C;부모 컴포넌트></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span>ChildComponent\n    <span class=\"token operator\">:</span>selectedItems<span class=\"token punctuation\">.</span>sync<span class=\"token operator\">=</span><span class=\"token string\">\"selectedItems\"</span>\n   <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ChildComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> selectedItems<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;자식 컴포넌트></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PropSync</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'selectedItems'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> selected<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 주의할 점은 부모 컴포넌트에서 <code class=\"language-text\">:selectItems.sync=\"...\"</code>를 통해 내렸다면 자식 컴포넌트에서 <code class=\"language-text\">@PropSync</code>의 인자 name에도 동일하게 지정해줘야한다. 이게 제대로 매핑되지 않으면 오류가 발생한다.</p>\n<h2 id=\"4-watch\" style=\"position:relative;\"><a href=\"#4-watch\" aria-label=\"4 watch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. @Watch</h2>\n<blockquote>\n<p>@Watch(path: string, options: WatchOptions = {})</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Vue<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">,</span> Watch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-property-decorator'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Watch</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'child'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">onChildChanged</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> oldVal<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Watch</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'person'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> immediate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> deep<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">onPersonChanged1</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">,</span> oldVal<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Watch</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'person'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">onPersonChanged2</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">,</span> oldVal<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Watch</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'person'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Watch</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'child'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">onPersonAndChildChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@Watch()</code>의 인자로 지정한 변수를 모니터링해서 변경이 되었을 때 처리를 수행하는 데코레이터이다. 첫 번째 인자에는 모니터링 대상 값을 넣고, 두 번째 인자에는 옵션을 지정할 수 있다. 자주 쓰이는 옵션은 아래와 같다.</p>\n<p><code class=\"language-text\">deep: true / false</code> : nested object도 감시할지 여부이다. 옵션을 사용할 경우, 객체 내부(하위 속성)의 값까지도 변경되었는지 감지한다.</p>\n<p><code class=\"language-text\">immediate: true / false</code> : 처음 값을 읽어들이는 시점에도 호출할지 여부이다.</p>\n<p>만약 같은 값을 여러 번 <code class=\"language-text\">@Watch()</code> 했을 경우에 가장 마지막에 지정한 것이 유효하다.</p>\n<h2 id=\"5-emit\" style=\"position:relative;\"><a href=\"#5-emit\" aria-label=\"5 emit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. @Emit</h2>\n<blockquote>\n<p>@Emit(event?: string)</p>\n</blockquote>\n<p>Prop이 상위 컴포넌트에서 하위 컴포넌트로 데이터를 내려주는 것이라면, Emit은 하위 컴포넌트에서 상위 컴포넌트로 데이터를 넘길 순 없기 때문에 하위 컴포넌트에서 이벤트를 발생시켜 상위 컴포넌트의 데이터를 변화시키는 것이다.</p>\n<p>&#x3C;상위 컴포넌트></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>ChildComponent <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">showLog</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"handleClick\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Vue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-property-decorator'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ChildComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/ChildComponent.vue'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ChildComponent\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world '</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>&#x3C;하위 컴포넌트> - <code class=\"language-text\">@Emit</code>을 사용하지 않을 경우.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>form <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">submit</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"onSubmit\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"value\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>Submit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Vue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-property-decorator'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 부모로 값 전달</span>\n  <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'showLog'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">$emit()</code>을 호출하면 괄호안에 정의된 이벤트가 발생한다. 일반적으로 하위 컴포넌트 특정 메서드 내부에서 호출한다. 하위 컴포넌트에서 <code class=\"language-text\">@Emit</code>을 사용하면 좀 더 코드가 단순해질 수 있다. 처리되는 이벤트 이름은 <code class=\"language-text\">@Emit</code> 옵션으로 구분할 수도 있지만 생략할 경우에는 메서드의 이름을 이벤트의 이름으로 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>form <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">submit</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"onSubmit\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"value\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>Submit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Emit<span class=\"token punctuation\">,</span> Vue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-property-decorator'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Emit</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">showLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"6-ref\" style=\"position:relative;\"><a href=\"#6-ref\" aria-label=\"6 ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. @Ref</h2>\n<blockquote>\n<p>@Ref(refKey?: string)</p>\n</blockquote>\n<p><code class=\"language-text\">@Ref</code>는 <code class=\"language-text\">$refs</code>에서 참조할 수 있는 요소 또는 컴포넌트를 정의하는 것으로 엘리먼트나 컴포넌트 요소에 접근하기 위해 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>ChildComponent ref<span class=\"token operator\">=</span><span class=\"token string\">\"childComponent\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button ref<span class=\"token operator\">=</span><span class=\"token string\">\"submitButton\"</span><span class=\"token operator\">></span>Submit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Vue<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">,</span> Ref <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-property-decorator'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\ncomponents<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\nChildComponent\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Ref</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> childComponent<span class=\"token operator\">:</span> ChildComponent<span class=\"token punctuation\">;</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Ref</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> submitButton<span class=\"token operator\">:</span> HTMLButtomElement<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 자식 컴포넌트 메서드 실행</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>childComponent<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 버튼에 포커스 설정</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>submitButton<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">@Ref()</code>를 쓰지 않았다면, <code class=\"language-text\">this.$refs.submitButton.focus()</code>와 같은 식으로 불러다 쓸 수 있다.</p>\n<h2 id=\"7-provide-inject\" style=\"position:relative;\"><a href=\"#7-provide-inject\" aria-label=\"7 provide inject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. @Provide/ @Inject</h2>\n<blockquote>\n<p>@Provide(key?: string | symbol) / @Inject(options?: { from?: InjectKey, default?: any } | InjectKey)</p>\n</blockquote>\n<p>부모 컴포넌트에서 <code class=\"language-text\">@Provide</code>로 정의된 대상을 자식 컴포넌트에서 @Inject로 참조할 수 있다. 이렇게만 보면 단순히 props와 차별점이 없어보인다. 부모 컴포넌트 아래 하위 컴포넌트가 깊게 여러 컴포넌트가 존재할 경우, 일반적으로 props를 통해 최하위 컴포넌트로 전달하려면, 전달에 또 전달을 반복해야 하지만(props drilling), <code class=\"language-text\">provide / inject</code>를 활용하면 최하단 컴포넌트에서 바로 불러다 쓸 수 있다. 리액트의 context API와 조금 비슷한 느낌이라고 볼 수 있다.</p>\n<p>하지만 Vue 공식 문서에서도 고급 플러그인이나 컴포넌트 라이브러리에서 주로 사용되고 일반적인 애플리케이션에서 사용을 지양해야한다고 명시하고 있기 때문에 가능하면 vuex와 같이 상태관리 라이브러리를 사용하는 편이 바람직하다. <code class=\"language-text\">provide</code> / <code class=\"language-text\">inject</code>를 사용할 경우 코드의 추적이 어렵기 때문이다.</p>\n<p>&#x3C;부모 컴포넌트></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"home\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">click</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"changeMessage\"</span><span class=\"token operator\">></span>메세지를 바꿔주세요<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Provide<span class=\"token punctuation\">,</span> Vue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-property-decorator\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Children <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/Children.vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  components<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    Children<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">changeMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Provide</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">)</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"provide/inject example\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>&#x3C;자식 컴포넌트></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Component<span class=\"token punctuation\">,</span>\n  Emit<span class=\"token punctuation\">,</span>\n  Inject<span class=\"token punctuation\">,</span>\n  Prop<span class=\"token punctuation\">,</span>\n  Vue<span class=\"token punctuation\">,</span>\n  Watch<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-property-decorator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Children</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Inject</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">readonly</span> message<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">@ProvideReactive</code> / <code class=\"language-text\">@InjectReactive</code>의 경우는 위와 동일하지만, <code class=\"language-text\">@ProvideReactive</code>를 통해 제공된 값이 부모 컴포넌트에서 변경되었을 때, 자식 컴포넌트의 <code class=\"language-text\">@InjectReactive</code>를 통해 받은 값이 그 변경에 반응한다는 점이 다르다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>이 밖에도 <code class=\"language-text\">@Model</code>, <code class=\"language-text\">@ModelSync</code>, <code class=\"language-text\">@VModel</code> 등 데코레이터가 존재하지만, 자주 활용할만한 데코레이터 위주로 정리하였다. 여러가지 데코레이터 중에서 <code class=\"language-text\">@Component</code>나 <code class=\"language-text\">@Prop</code>과 같은 경우는 일상적으로 많이 쓰이는 데코레이터지만, <code class=\"language-text\">@PropSync</code> 와 같은 데코레이터 또한 사용하면 유용하게 사용할 수 있을 것 같다.</p>\n<hr>\n<p>출처</p>\n<ol>\n<li><a href=\"https://adeuran.tistory.com/14\">Vue Router의 LifeCycle 이해하기</a></li>\n<li><a href=\"https://beomy.tistory.com/75\">vue-router 네비게이션 가드</a></li>\n</ol>","frontmatter":{"title":"vue-property-decorator (vue+typescript+class)","date":"June 25, 2022","thumbnail":null}}},"pageContext":{"slug":"/vue/vue-property-decorator/","previous":{"fields":{"slug":"/github/pull-rebase/"},"frontmatter":{"title":"git pull vs git pull --rebase vs git rebase","category":"Git","draft":false}},"next":{"fields":{"slug":"/vue/vuex_typescript/"},"frontmatter":{"title":"vuex + typescript (vuex-module-decorator, vuex-class)","category":"Vue","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}