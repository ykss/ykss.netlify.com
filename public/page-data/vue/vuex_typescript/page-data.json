{"componentChunkName":"component---src-templates-blog-post-js","path":"/vue/vuex_typescript/","result":{"data":{"site":{"siteMetadata":{"title":"Ykss","author":"[Ykss]","siteUrl":"https://ykss.netlify.app","comment":{"disqusShortName":"","utterances":"ykss/ykss.netlify.com"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"3e2f72b6-a2ec-563c-badd-f1f5a42963e3","excerpt":"Vue를 사용하면서 전역 상태관리 라이브러리로 Vuex를 주로 사용한다. (리액트의 Redux와 같은 존재..) Vue 공식 도큐멘테이션에서도 Vuex를 추천할만큼 대표적인 라이브러리라고 할 수 있다. 하지만 typescript와 함께 활용되는 부분에 대해서는 Vuex의 공식 문서에도 썩 자세히 나와있지 않다. 특히 주로 클래스 컴포넌트로 개발하는 개발자들에게는 더 더욱 잘 맞지 않는다. 그래서 Vuex를 클래스 형태로 정의해서 typescript…","html":"<p>Vue를 사용하면서 전역 상태관리 라이브러리로 Vuex를 주로 사용한다. (리액트의 Redux와 같은 존재..)</p>\n<p>Vue 공식 도큐멘테이션에서도 Vuex를 추천할만큼 대표적인 라이브러리라고 할 수 있다. 하지만 typescript와 함께 활용되는 부분에 대해서는 Vuex의 공식 문서에도 썩 자세히 나와있지 않다. 특히 주로 클래스 컴포넌트로 개발하는 개발자들에게는 더 더욱 잘 맞지 않는다.</p>\n<p>그래서 Vuex를 클래스 형태로 정의해서 typescript와 쓰기 위해서 <code class=\"language-text\">vuex-module-decorator</code>와 <code class=\"language-text\">vuex-class</code>가 주로 쓰인다. 보통 typescript와 Vue를 사용해서 클래스 형태로 개발할 때 <code class=\"language-text\">vue-class-component</code>와 <code class=\"language-text\">vue-property-decorator</code>가 주로 사용되는데, <code class=\"language-text\">vuex-class</code>와 <code class=\"language-text\">vuex-module-decorator</code> 또한 위 두 라이브러리와 궁합이 잘 맞는 라이브러리라고 할 수 있겠다.</p>\n<p><code class=\"language-text\">vuex-module-decorator</code>를 사용하지 않을 경우와 사용할 경우는 아래와 같이 코드가 달라진다.</p>\n<p>&#x3C;사용하지 않을 경우></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex</span><span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>&#x3C;사용할 경우 - 클래스 형태></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module<span class=\"token punctuation\">,</span> Mutation<span class=\"token punctuation\">,</span> Action<span class=\"token punctuation\">,</span> VuexModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex-module-decorators'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VuexModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이러한 부분은 일반적인 Vue 사용에서 <code class=\"language-text\">vue-class-component</code>를 통해 클래스 형태의 컴포넌트를 사용하게 되었고, 더 효율적인 사용을 위해 <code class=\"language-text\">vue-property-decorator</code>가 등장한 것과 맥락이 같았다. 스토어 또한 클래스 형태로 만들기 위해 <code class=\"language-text\">vuex-class</code>가 등장했고, 또 그것을 @를 통해 더 효율적으로 사용하게 하기 위해 <code class=\"language-text\">vuex-module-decorator</code>가 등장했다. (완벽하게 이러한 관계는 아니겠지만, 이런 맥락으로 이해가 되었다.)</p>\n<p>개인적으로 스토어를 기존의 방식으로 정의한 것과 <code class=\"language-text\">vuex-module-decorator</code>를 사용해 모듈 형식으로 @를 써서 정의한 코드를 보면 확실히 후자가 가독성 측면에서 더 좋았고, 코드도 간결하게 표현할 수 있다는 생각이 들었다. 표현 방식만 다를 뿐 어떤 정답이 정해진 것은 아니기 때문에, 본인이 쓰기에 더 편하고 잘 읽히는 방식을 사용하면 된다.</p>\n<h2 id=\"1-code-classlanguage-textmodulecode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textmodulecode\" aria-label=\"1 code classlanguage textmodulecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">@Module</code></h2>\n<p>마치 <code class=\"language-text\">@Component</code> 데코레이터와 비슷하게, 해당 클래스가 모듈인 것으로 지정해주는 데코레이터이다. <code class=\"language-text\">@Module</code> 선언이 되어있고, 해당 클래스가 VuexModule을 상속하여야 스토어의 역할을 할 수 있다.</p>\n<p><code class=\"language-text\">@Module</code> 데코레이터의 인자안에 <code class=\"language-text\">dynamic, namespaced, name</code>등의 옵션 지정이 가능하다.</p>\n<h2 id=\"2-state\" style=\"position:relative;\"><a href=\"#2-state\" aria-label=\"2 state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. state</h2>\n<p>기존에 state를 선언하려면 객체안에 state 속성 안에 선언을 해주어야 했지만, 데코레이터를 사용할 때는 변수 선언하듯이 선언이 가능하다. <code class=\"language-text\">vue-module-decorator</code>로 아래와 같이 코딩해도 기존 방식으로 다시 변환 됨을 기억하자.</p>\n<p>&#x3C;기존 방식></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    wheels<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C; vue-module-decorator 방식></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module<span class=\"token punctuation\">,</span> VuexModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex-module-decorators'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VuexModule</span> <span class=\"token punctuation\">{</span>\n  wheels <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>state의 경우에는 값이 결정되어 있지 않은 경우, <code class=\"language-text\">null</code>로 초기화되어야 한다. 타입 같은 경우는 타입 유니온을 통해 <code class=\"language-text\">number|null</code>과 같이 선언해줄 수 있다.</p>\n<h2 id=\"3-getter\" style=\"position:relative;\"><a href=\"#3-getter\" aria-label=\"3 getter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. getter</h2>\n<p>getter 같은 경우에는 getter 역할을 하는 메서드를 get을 붙여 선언하는 방식으로 사용될 수 있다.</p>\n<p>&#x3C;기존 방식></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">axles</span><span class=\"token operator\">:</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C; vue-module-decorator 방식></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module<span class=\"token punctuation\">,</span> VuexModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex-module-decorators'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VuexModule</span> <span class=\"token punctuation\">{</span>\n  wheels <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">axles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"4-code-classlanguage-textmutationcode\" style=\"position:relative;\"><a href=\"#4-code-classlanguage-textmutationcode\" aria-label=\"4 code classlanguage textmutationcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <code class=\"language-text\">@Mutation</code></h2>\n<p><code class=\"language-text\">@Mutation</code> 을 통해 mutation 선언이 간으하고 해당 데코레이터를 사용하고 나면 <code class=\"language-text\">this</code>는 state를 가르키게 된다. 그렇기 때문에 <code class=\"language-text\">state.item++</code> 이나 <code class=\"language-text\">this.item++</code> 모두 가능하다.</p>\n<p>&#x3C;기존 방식></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    wheels<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">puncture</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">-</span> payload\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C; vue-module-decorator 방식></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module<span class=\"token punctuation\">,</span> VuexModule<span class=\"token punctuation\">,</span> Mutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex-module-decorators'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VuexModule</span> <span class=\"token punctuation\">{</span>\n  wheels <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Mutation</span></span>\n  <span class=\"token function\">puncture</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">-</span> n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mutation에 <code class=\"language-text\">async</code>가 쓰이면 안된다. 그리고 <code class=\"language-text\">=></code> 방식으로 정의되서도 안된다. 런타임에 다시 바인딩해야 하기 때문이다.</p>\n<h2 id=\"5-code-classlanguage-textactioncode\" style=\"position:relative;\"><a href=\"#5-code-classlanguage-textactioncode\" aria-label=\"5 code classlanguage textactioncode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. <code class=\"language-text\">@Action</code></h2>\n<p>액션을 선언하는 방식도 <code class=\"language-text\">@Action</code> 데코레이터를 통해 정의한다. 비동기 작업을 처리해야 하는 경우, <code class=\"language-text\">async</code>와 함께 자주 사용된다. <code class=\"language-text\">@Action</code> 메서드가 정의되면 <code class=\"language-text\">this</code>는 <code class=\"language-text\">{...[all fields of state], context}</code>와 같은 형태를 가지게 된다. <code class=\"language-text\">@Action({ commit: 'increment' })</code>으로 표현하여 뮤테이션에 커밋해 줄 수도 있다.</p>\n<p>&#x3C;기존 방식></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    wheels<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">addWheel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">+</span> payload\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">fetchNewWheels</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> wheels <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addWheel'</span><span class=\"token punctuation\">,</span> wheels<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C; vue-module-decorator 방식></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module<span class=\"token punctuation\">,</span> VuexModule<span class=\"token punctuation\">,</span> Mutation<span class=\"token punctuation\">,</span> Action <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex-module-decorators'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'request'</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VuexModule</span> <span class=\"token punctuation\">{</span>\n  wheels <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Mutation</span></span>\n  <span class=\"token function\">addWheel</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wheels <span class=\"token operator\">+</span> n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Action</span></span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">fetchNewWheels</span><span class=\"token punctuation\">(</span>wheelStore<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> wheels <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>wheelStore<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addWheel'</span><span class=\"token punctuation\">,</span> wheels<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"6-code-classlanguage-textmutationactioncode\" style=\"position:relative;\"><a href=\"#6-code-classlanguage-textmutationactioncode\" aria-label=\"6 code classlanguage textmutationactioncode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. <code class=\"language-text\">@MutationAction</code></h2>\n<p><code class=\"language-text\">@Action</code>과 <code class=\"language-text\">@Mutation</code>을 사용하다 보면 아래와 같은 요구 사항이 생길 수 있다.</p>\n<p>먼저 비동기 작업을 수행해야 한다.</p>\n<p>그 후 뮤테이션을 통해 결과값을 스토어에 커밋해야 한다.</p>\n<p>위와 같은 상황을 위해 사용되는 데코레이터가 <code class=\"language-text\">@MutationAction</code>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> typicodeModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    users<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">updatePosts</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>posts <span class=\"token operator\">=</span> posts\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">updatePosts</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'https://jsonplaceholder.typicode.com/posts'</span>\n      <span class=\"token punctuation\">)</span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePosts'</span><span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 표현할 수 있는 것을 <code class=\"language-text\">@MutationAction</code>을 통해 아래와 같이 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>VuexModule<span class=\"token punctuation\">,</span> Module<span class=\"token punctuation\">,</span> MutationAction<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex-module-decorators'</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">TypicodeModule</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VuexModule</span> <span class=\"token punctuation\">{</span>\n  posts<span class=\"token operator\">:</span> Post<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  users<span class=\"token operator\">:</span> User<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">MutationAction</span></span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updatePosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://jsonplaceholder.typicode.com/posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><code class=\"language-text\">namespace</code> 모듈을 사용하려면 <code class=\"language-text\">@Module</code> 데코레이터 안에서 <code class=\"language-text\">@Module({ namespaced: true, name: 'mm' })</code>과 같이 정의할 수 있다. 네임스페이스를 사용함을 통해 여러 스토어 모듈을 사용할 때, 구분할 수 있게 된다.</p>\n<p>컴포넌트에서 스토어를 연결하여 사용할 때, <code class=\"language-text\">vuex-class</code>의 <code class=\"language-text\">namespace</code> 를 사용하여 만들어진 스토어 모듈을 연결한다. 그 후 해당 모듈의 state와 getter로 상탯값을 가져와 화면에 보여주는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Vue<span class=\"token punctuation\">,</span> Watch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-property-decorator'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> namespace<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Action<span class=\"token punctuation\">,</span> Getter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex-class'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> CountStoreModule <span class=\"token operator\">=</span> <span class=\"token function\">namespace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CountStore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Home</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">CountStoreModule</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> count<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">CountStoreModule</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">Getter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'doubledCount'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> doubledCount<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">CountStoreModule</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">Action</span><span class=\"token punctuation\">(</span><span class=\"token string\">'incr'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> incr<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>delta<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<ol>\n<li><a href=\"https://blog2.deliwind.com/20181207/frontend-vue-typescript-4/\">VueJS 에서 Typescript로 개발하기 4</a></li>\n<li><a href=\"https://championswimmer.in/vuex-module-decorators/\">vuex-module-decorators</a></li>\n</ol>","frontmatter":{"title":"vuex + typescript (vuex-module-decorator, vuex-class)","date":"June 28, 2022","thumbnail":null}}},"pageContext":{"slug":"/vue/vuex_typescript/","previous":{"fields":{"slug":"/vue/vue-property-decorator/"},"frontmatter":{"title":"vue-property-decorator (vue+typescript+class)","category":"Vue","draft":false}},"next":{"fields":{"slug":"/web/atomic_design/"},"frontmatter":{"title":"[디자인시스템] 아토믹 디자인(Atomic Design)","category":"Web","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}