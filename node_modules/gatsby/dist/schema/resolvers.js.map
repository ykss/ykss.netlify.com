{"version":3,"sources":["../../src/schema/resolvers.js"],"names":["systemPath","require","normalize","_","GraphQLList","getNullableType","getNamedType","Kind","findMany","typeName","source","args","context","info","stats","totalRunQuery","totalPluralRunQuery","nodeModel","runQuery","query","firstOnly","type","schema","getType","path","connectionType","findOne","filter","findManyPaginated","group","getProjectedField","distinct","extendedArgs","result","paginate","skip","limit","field","edges","values","reduce","acc","node","value","concat","Date","toISOString","Array","from","Set","sort","groupedResults","isArray","forEach","key","Object","create","keys","fieldValue","push","results","count","length","items","slice","pageCount","Math","ceil","currentPage","hasPreviousPage","hasNextPage","totalCount","map","item","i","arr","next","previous","nodes","pageInfo","itemCount","perPage","link","options","fieldConfig","resolver","resolve","defaultFieldResolver","fromNode","returnType","by","getNodesByIds","ids","getNodeById","id","equals","eq","oneOf","in","operator","split","reduceRight","find","obj","fileByPath","findLinkedFileNode","relativePath","fileLinkPath","parentFileNode","dir","linkedFileNode","getAllNodes","n","absolutePath","findRootNodeAncestor","internal","resolveValue","v","fieldName","selectionSet","fieldNodes","getFieldNodeByNameInSelectionSet","fieldEnum","getFields","arg","name","fieldNode","fieldArg","arguments","enumKey","getValue","selections","selection","kind","FRAGMENT_SPREAD","fragmentDef","fragments","INLINE_FRAGMENT","module","exports"],"mappings":"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","sourcesContent":["const systemPath = require(`path`)\nconst normalize = require(`normalize-path`)\nconst _ = require(`lodash`)\nconst { GraphQLList, getNullableType, getNamedType, Kind } = require(`graphql`)\nimport { getValueAt } from \"../utils/get-value-at\"\n\nconst findMany = typeName => (source, args, context, info) => {\n  if (context.stats) {\n    context.stats.totalRunQuery++\n    context.stats.totalPluralRunQuery++\n  }\n\n  return context.nodeModel.runQuery(\n    {\n      query: args,\n      firstOnly: false,\n      type: info.schema.getType(typeName),\n      stats: context.stats,\n    },\n    { path: context.path, connectionType: typeName }\n  )\n}\n\nconst findOne = typeName => (source, args, context, info) => {\n  if (context.stats) {\n    context.stats.totalRunQuery++\n  }\n  return context.nodeModel.runQuery(\n    {\n      query: { filter: args },\n      firstOnly: true,\n      type: info.schema.getType(typeName),\n      stats: context.stats,\n    },\n    { path: context.path }\n  )\n}\n\nconst findManyPaginated = typeName => async (source, args, context, info) => {\n  // Peek into selection set and pass on the `field` arg of `group` and\n  // `distinct` which might need to be resolved.\n  const group = getProjectedField(info, `group`)\n  const distinct = getProjectedField(info, `distinct`)\n  const extendedArgs = { ...args, group: group || [], distinct: distinct || [] }\n\n  const result = await findMany(typeName)(source, extendedArgs, context, info)\n  return paginate(result, { skip: args.skip, limit: args.limit })\n}\n\nconst distinct = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const values = edges.reduce((acc, { node }) => {\n    const value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n    return value != null\n      ? acc.concat(value instanceof Date ? value.toISOString() : value)\n      : acc\n  }, [])\n  return Array.from(new Set(values)).sort()\n}\n\nconst group = (source, args, context, info) => {\n  const { field } = args\n  const { edges } = source\n  const groupedResults = edges.reduce((acc, { node }) => {\n    const value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n    const values = Array.isArray(value) ? value : [value]\n    values\n      .filter(value => value != null)\n      .forEach(value => {\n        const key = value instanceof Date ? value.toISOString() : value\n        acc[key] = (acc[key] || []).concat(node)\n      })\n    return acc\n    // Note: using Object.create on purpose:\n    //   object key may be arbitrary string including reserved words (i.e. `constructor`)\n    //   see: https://github.com/gatsbyjs/gatsby/issues/22508\n  }, Object.create(null))\n\n  return Object.keys(groupedResults)\n    .sort()\n    .reduce((acc, fieldValue) => {\n      acc.push({\n        ...paginate(groupedResults[fieldValue], args),\n        field,\n        fieldValue,\n      })\n      return acc\n    }, [])\n}\n\nconst paginate = (results = [], { skip = 0, limit }) => {\n  if (results === null) {\n    results = []\n  }\n\n  const count = results.length\n  const items = results.slice(skip, limit && skip + limit)\n\n  const pageCount = limit\n    ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit)\n    : skip\n    ? 2\n    : 1\n  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1\n  const hasPreviousPage = currentPage > 1\n  const hasNextPage = skip + limit < count\n\n  return {\n    totalCount: count,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      currentPage,\n      hasPreviousPage,\n      hasNextPage,\n      itemCount: items.length,\n      pageCount,\n      perPage: limit,\n    },\n  }\n}\n\nconst link = (options = {}, fieldConfig) => async (\n  source,\n  args,\n  context,\n  info\n) => {\n  const resolver = fieldConfig.resolve || context.defaultFieldResolver\n  const fieldValue = await resolver(source, args, context, {\n    ...info,\n    from: options.from || info.from,\n    fromNode: options.from ? options.fromNode : info.fromNode,\n  })\n\n  if (fieldValue == null) return null\n\n  const returnType = getNullableType(options.type || info.returnType)\n  const type = getNamedType(returnType)\n\n  if (options.by === `id`) {\n    if (Array.isArray(fieldValue)) {\n      return context.nodeModel.getNodesByIds(\n        { ids: fieldValue, type: type },\n        { path: context.path }\n      )\n    } else {\n      return context.nodeModel.getNodeById(\n        { id: fieldValue, type: type },\n        { path: context.path }\n      )\n    }\n  }\n\n  const equals = value => {\n    return { eq: value }\n  }\n  const oneOf = value => {\n    return { in: value }\n  }\n\n  // Return early if fieldValue is [] since { in: [] } doesn't make sense\n  if (Array.isArray(fieldValue) && fieldValue.length === 0) {\n    return fieldValue\n  }\n\n  const operator = Array.isArray(fieldValue) ? oneOf : equals\n  args.filter = options.by.split(`.`).reduceRight((acc, key, i, { length }) => {\n    return {\n      [key]: i === length - 1 ? operator(acc) : acc,\n    }\n  }, fieldValue)\n\n  const firstOnly = !(returnType instanceof GraphQLList)\n\n  if (context.stats) {\n    context.stats.totalRunQuery++\n    if (firstOnly) {\n      context.stats.totalPluralRunQuery++\n    }\n  }\n\n  const result = await context.nodeModel.runQuery(\n    { query: args, firstOnly, type, stats: context.stats },\n    { path: context.path }\n  )\n  if (\n    returnType instanceof GraphQLList &&\n    Array.isArray(fieldValue) &&\n    Array.isArray(result)\n  ) {\n    return fieldValue.map(value =>\n      result.find(obj => getValueAt(obj, options.by) === value)\n    )\n  } else {\n    return result\n  }\n}\n\nconst fileByPath = (options = {}, fieldConfig) => async (\n  source,\n  args,\n  context,\n  info\n) => {\n  const resolver = fieldConfig.resolve || context.defaultFieldResolver\n  const fieldValue = await resolver(source, args, context, {\n    ...info,\n    from: options.from || info.from,\n    fromNode: options.from ? options.fromNode : info.fromNode,\n  })\n\n  if (fieldValue == null) return null\n\n  const findLinkedFileNode = relativePath => {\n    // Use the parent File node to create the absolute path to\n    // the linked file.\n    const fileLinkPath = normalize(\n      systemPath.resolve(parentFileNode.dir, relativePath)\n    )\n\n    // Use that path to find the linked File node.\n    const linkedFileNode = _.find(\n      context.nodeModel.getAllNodes({ type: `File` }),\n      n => n.absolutePath === fileLinkPath\n    )\n    return linkedFileNode\n  }\n\n  // Find the File node for this node (we assume the node is something\n  // like markdown which would be a child node of a File node).\n  const parentFileNode = context.nodeModel.findRootNodeAncestor(\n    source,\n    node => node.internal && node.internal.type === `File`\n  )\n\n  return resolveValue(findLinkedFileNode, fieldValue)\n}\n\nconst resolveValue = (resolve, value) =>\n  Array.isArray(value)\n    ? value.map(v => resolveValue(resolve, v))\n    : resolve(value)\n\nconst getProjectedField = (info, fieldName) => {\n  const selectionSet = info.fieldNodes[0].selectionSet\n  const fieldNodes = getFieldNodeByNameInSelectionSet(\n    selectionSet,\n    fieldName,\n    info\n  )\n\n  const fieldEnum = getNullableType(\n    getNullableType(info.returnType)\n      .getFields()\n      [fieldName].args.find(arg => arg.name === `field`).type\n  )\n\n  return fieldNodes.reduce((acc, fieldNode) => {\n    const fieldArg = fieldNode.arguments.find(arg => arg.name.value === `field`)\n    if (fieldArg) {\n      const enumKey = fieldArg.value.value\n      return [...acc, fieldEnum.getValue(enumKey).value]\n    } else {\n      return acc\n    }\n  }, [])\n}\n\nconst getFieldNodeByNameInSelectionSet = (selectionSet, fieldName, info) =>\n  selectionSet.selections.reduce((acc, selection) => {\n    if (selection.kind === Kind.FRAGMENT_SPREAD) {\n      const fragmentDef = info.fragments[selection.name.value]\n      if (fragmentDef) {\n        return [\n          ...acc,\n          ...getFieldNodeByNameInSelectionSet(\n            fragmentDef.selectionSet,\n            fieldName,\n            info\n          ),\n        ]\n      }\n    } else if (selection.kind === Kind.INLINE_FRAGMENT) {\n      return [\n        ...acc,\n        ...getFieldNodeByNameInSelectionSet(\n          selection.selectionSet,\n          fieldName,\n          info\n        ),\n      ]\n    } /* FIELD_NODE */ else {\n      if (selection.name.value === fieldName) {\n        return [...acc, selection]\n      }\n    }\n    return acc\n  }, [])\n\nconst defaultFieldResolver = (source, args, context, info) => {\n  if (!source || typeof source !== `object`) return null\n\n  if (info.from) {\n    if (info.fromNode) {\n      const node = context.nodeModel.findRootNodeAncestor(source)\n      if (!node) return null\n      return getValueAt(node, info.from)\n    }\n    return getValueAt(source, info.from)\n  }\n\n  return source[info.fieldName]\n}\n\nmodule.exports = {\n  defaultFieldResolver,\n  findManyPaginated,\n  findOne,\n  fileByPath,\n  link,\n  distinct,\n  group,\n  paginate,\n}\n"],"file":"resolvers.js"}