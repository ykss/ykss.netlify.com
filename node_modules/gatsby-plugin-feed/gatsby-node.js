"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _rss = _interopRequireDefault(require("rss"));

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _internals = require("./internals");

var _pluginOptions = _interopRequireDefault(require("./plugin-options"));

var publicPath = "./public";

var warnMessage = function warnMessage(error, behavior) {
  return "\n  gatsby-plugin-feed was initialized in gatsby-config.js without a " + error + ".\n  This means that the plugin will use " + behavior + ", which may not match your use case.\n  This behavior will be removed in the next major release of gatsby-plugin-feed.\n  For more info, check out: https://gatsby.dev/adding-rss-feed\n";
}; // TODO: remove in the next major release
// A default function to transform query data into feed entries.


var serialize = function serialize(_ref) {
  var _ref$query = _ref.query,
      site = _ref$query.site,
      allMarkdownRemark = _ref$query.allMarkdownRemark;
  return allMarkdownRemark.edges.map(function (edge) {
    return (0, _extends2.default)({}, edge.node.frontmatter, {
      description: edge.node.excerpt,
      url: site.siteMetadata.siteUrl + edge.node.fields.slug,
      guid: site.siteMetadata.siteUrl + edge.node.fields.slug,
      custom_elements: [{
        "content:encoded": edge.node.html
      }]
    });
  });
};

exports.onPreBootstrap = /*#__PURE__*/function () {
  var _onPreBootstrap = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref2, pluginOptions) {
    var reporter, normalized;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            reporter = _ref2.reporter;
            delete pluginOptions.plugins;
            _context.prev = 2;
            _context.next = 5;
            return _pluginOptions.default.validate(pluginOptions);

          case 5:
            normalized = _context.sent;

            // TODO: remove these checks in the next major release
            if (!normalized.feeds) {
              reporter.warn(reporter.stripIndent(warnMessage("feeds option", "the internal RSS feed creation")));
            } else if (normalized.feeds.some(function (feed) {
              return typeof feed.title !== "string";
            })) {
              reporter.warn(reporter.stripIndent(warnMessage("title in a feed", "the default feed title")));
            } else if (normalized.feeds.some(function (feed) {
              return typeof feed.serialize !== "function";
            })) {
              reporter.warn(reporter.stripIndent(warnMessage("serialize function in a feed", "the internal serialize function")));
            }

            _context.next = 12;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](2);
            throw new Error(_context.t0.details.map(function (detail) {
              return "[Config Validation]: " + detail.message;
            }).join("\n"));

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 9]]);
  }));

  function onPreBootstrap(_x, _x2) {
    return _onPreBootstrap.apply(this, arguments);
  }

  return onPreBootstrap;
}();

exports.onPostBuild = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(_ref4, pluginOptions) {
    var graphql, options, baseQuery, _iterator, _isArray, _i, _ref6, _ref7, feed, _options$feed, setup, locals, serializer, rssFeed, outputPath, outputDir;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            graphql = _ref4.graphql;

            /*
             * Run the site settings query to gather context, then
             * then run the corresponding feed for each query.
             */
            options = (0, _extends2.default)({}, _internals.defaultOptions, {}, pluginOptions);
            _context2.next = 4;
            return (0, _internals.runQuery)(graphql, options.query);

          case 4:
            baseQuery = _context2.sent;
            _iterator = options.feeds, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();

          case 6:
            if (!_isArray) {
              _context2.next = 12;
              break;
            }

            if (!(_i >= _iterator.length)) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt("break", 36);

          case 9:
            _ref6 = _iterator[_i++];
            _context2.next = 16;
            break;

          case 12:
            _i = _iterator.next();

            if (!_i.done) {
              _context2.next = 15;
              break;
            }

            return _context2.abrupt("break", 36);

          case 15:
            _ref6 = _i.value;

          case 16:
            _ref7 = _ref6;
            feed = (0, _extends2.default)({}, _ref7);

            if (!feed.query) {
              _context2.next = 22;
              break;
            }

            _context2.next = 21;
            return (0, _internals.runQuery)(graphql, feed.query).then(function (result) {
              return (0, _lodash.default)({}, baseQuery, result);
            });

          case 21:
            feed.query = _context2.sent;

          case 22:
            _options$feed = (0, _extends2.default)({}, options, {}, feed), setup = _options$feed.setup, locals = (0, _objectWithoutPropertiesLoose2.default)(_options$feed, ["setup"]);
            serializer = feed.serialize && typeof feed.serialize === "function" ? feed.serialize : serialize;
            rssFeed = serializer(locals).reduce(function (merged, item) {
              merged.item(item);
              return merged;
            }, new _rss.default(setup(locals)));
            outputPath = _path.default.join(publicPath, feed.output);
            outputDir = _path.default.dirname(outputPath);
            _context2.next = 29;
            return _fsExtra.default.exists(outputDir);

          case 29:
            if (_context2.sent) {
              _context2.next = 32;
              break;
            }

            _context2.next = 32;
            return _fsExtra.default.mkdirp(outputDir);

          case 32:
            _context2.next = 34;
            return _fsExtra.default.writeFile(outputPath, rssFeed.xml());

          case 34:
            _context2.next = 6;
            break;

          case 36:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();